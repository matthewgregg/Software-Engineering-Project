package artemislite;

import javax.naming.ConfigurationException;
import javax.naming.InvalidNameException;
import java.util.*;

/**
 * @author mark
 *
 */
public class SetupGame {

	private static final int MIN_PLAYERS = 2;
	private static final int MAX_PLAYERS = 4;
	private static final int NUMBER_OF_SQUARES = 12;
	private ArrayList<Square> squares;

	public static List<Player> playerCreation(Scanner scanner) {
		ArrayList<Player> players = new ArrayList<>();
		String userOption = "";
		int numPlayers = 0;
		boolean validPlayerNum = false;

		System.out.println("How many players? Enter a number between " + MIN_PLAYERS + " and " + MAX_PLAYERS + ".");

		do {
			try {
				/*
				 * don't mix nextLine and nextInt as nextInt doesn't read the following new line
				 * character which results ina empty string
				 */
				userOption = scanner.nextLine();
				if (Integer.parseInt(userOption) >= MIN_PLAYERS && Integer.parseInt(userOption) <= MAX_PLAYERS) {
					validPlayerNum = true;
					numPlayers = Integer.parseInt(userOption);
				} else {
					System.out.println("Please enter a number between " + MIN_PLAYERS + " and " + MAX_PLAYERS + ".");
				}
			} catch (NumberFormatException e) {
				System.out.println("Error! Try again.");
			}
		} while (!validPlayerNum);

		System.out.println("Enter the names of the " + userOption + " players. Press return after entering a name.");

		int playerID = 0;
		boolean validPlayerName = false;
		while (players.size() < numPlayers) {
			do {
				String name = "";
				boolean uniqueName = true;
				try {
					name = scanner.nextLine();
					// check previous names
					for (Player player : players) {
						if (player.getName().equalsIgnoreCase(name)) {
							uniqueName = false;
							break;
						}
					}
					if (uniqueName) {
						// TODO (random) id should be generated by player class
						Player player = new Player(playerID, name);
						playerID++;
						players.add(player);
						validPlayerName = true;
					} else {
						throw new InvalidNameException();
					}
				} catch (InvalidNameException e) {
					System.out.printf("%s is not a valid name. Try again.\n", name);
				}
			} while (!validPlayerName);
		}
		return players;
	}

	public static ArrayList<Square> setupBoard() {
		ArrayList<Square> squares = new ArrayList<>();
		Square sq1 = new Square("Go", 0, "Pass Go, Collect 200! or something ...");

		SystemSquare ss1 = new SystemSquare("Square 1",
				1,
				"System 1",
				SystemName.SYSTEM_NAME_1,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss2 = new SystemSquare("Square 2",
				2,
				"System 1",
				SystemName.SYSTEM_NAME_1,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss3 = new SystemSquare("Square 3",
				3,
				"System 1",
				SystemName.SYSTEM_NAME_2,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss4 = new SystemSquare("Square 4",
				4,
				"System 1",
				SystemName.SYSTEM_NAME_2,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss5 = new SystemSquare("Square 5",
				5,
				"System 1",
				SystemName.SYSTEM_NAME_2,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		Square sq2 = new Square("Nothing", 6, "Missed launch window");

		SystemSquare ss6 = new SystemSquare("Square 6",
				7,
				"System 1",
				SystemName.SYSTEM_NAME_3,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss7 = new SystemSquare("Square 7",
				8,
				"System 1",
				SystemName.SYSTEM_NAME_3,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss8 = new SystemSquare("Square 8",
				9,
				"System 1",
				SystemName.SYSTEM_NAME_3,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss9 = new SystemSquare("Square 9",
				10,
				"System 1",
				SystemName.SYSTEM_NAME_4,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		SystemSquare ss10 = new SystemSquare("Square 10",
				11,
				"System 1",
				SystemName.SYSTEM_NAME_4,
				2,
				300,
				200,
				new int[] { 10, 20, 30, 90, 150 });

		Collections.addAll(squares, sq1, ss1, ss2, ss3, ss4, ss5, sq2, ss6, ss7, ss8, ss9, ss10);
		squares.sort(new ComparePosition());
		return squares;
	}

	public void displayGameRules(List systemNames) {
		/*
		systemNames = new ArrayList<>();

		System.out.println("OK Space Cadets, let's firstly outline the rules before we get started.");
		try {
			Thread.sleep(2000);
			System.out.println("You'll firstly roll dice to decide who goes first");
			Thread.sleep(2000);
			System.out.println(
					"When it's your go, pick what you'd like to do from the menu.\n e.g. Roll the dice to move along the board.\n");
			Thread.sleep(4000);
			System.out.println("You'll each be alloted some Space Points(currency of the solar system) to start out.\n"
					+ "Use your points to purchase a square that you land on or pay other players when you land on their square.\n"
					+ "If you don't want to buy the square you land on, it will be auctioned to the other players.\n");
			Thread.sleep(10000);
			// TODO alter magic number 4
			System.out.println("The board has 12 squares in total grouped into 4 systems.");
			Thread.sleep(2000);
			// TODO dynamically print system names... Use iterator?
			// System.out.println(systemNames.toString());
			System.out.println(
					"Systems and their squares get more expensive the further you are along the board...\n"
					+ "...but there's also bigger rewards should another player land on your square.â€‹\n"
							+ "Once you own a whole system, you can pay to add a development.\n");
			Thread.sleep(6000);
			System.out.println("All systems must be developed to complete the mission and win the game.\n"
					+ "Should any player go 'Bankrupt' by running out of Space Points, the game ends and the mission has failed.\n");
			Thread.sleep(6000);
			// TODO Does this make sense? They're playing against each other and ALSO as a
			// team...
		} catch (InterruptedException e) {
			System.out.println("Thread error");
		}
		*/
	}
}
